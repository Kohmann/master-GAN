import torch
import numpy as np
import matplotlib.pyplot as plt
from tqdm import trange

from metrics import sw_approx

def cotgan_trainer(model, dataset, params, val_dataset=None, neptune_logger=None, continue_training=False):

    batch_size = params["batch_size"]
    n_epochs = params["n_epochs"]
    learning_rate = params["l_rate"]
    device = params["device"]
    model_name = params["model_name"]
    max_seq_len = params["max_seq_len"]
    Z_dim = params["Z_dim"]

    # Prepare datasets
    dataloader = torch.utils.data.DataLoader(
        dataset=dataset,
        batch_size=batch_size*2,
        shuffle=True
    )
    # TODO - put data into GPU entirely
    #dataloader.train_data.to(torch.device(device))  # put data into GPU entirely
    #dataloader.train_labels.to(torch.device(device))

    if val_dataset is not None:
        dataloader_val = torch.utils.data.DataLoader(
            dataset=val_dataset,
            batch_size=batch_size*2,
            shuffle=True
        )

    # Optimizers
    beta1, beta2 = (params["beta1"], params["beta2"])
    disc_h_opt = torch.optim.Adam(model.discriminator_h.parameters(), lr=learning_rate, betas=(beta1, beta2))
    disc_m_opt = torch.optim.Adam(model.discriminator_m.parameters(), lr=learning_rate, betas=(beta1, beta2))
    gen_opt = torch.optim.Adam(model.generator.parameters(), lr=learning_rate, betas=(beta1, beta2))
    model.to(device)

    x_sw = torch.concat([x for x, _ in dataloader]).detach_().cpu()
    n_samples = len(x_sw)
    fixed_Z_mb = torch.randn(n_samples, max_seq_len, Z_dim, device=device)

    logger = trange(n_epochs, desc=f"Epoch: 0, G_loss: 0, D_loss: 0")
    for epoch in logger:
        for X, _ in dataloader:
            X_mb, X_mb_p = torch.split(X, batch_size, dim=0)
            X_mb = X_mb.to(device)
            X_mb_p = X_mb_p.to(device)

            Z_mb = torch.randn(batch_size, max_seq_len, Z_dim, device=device)
            Z_mb_p = torch.randn(batch_size, max_seq_len, Z_dim, device=device)

            # Train discriminator
            D_loss = model(Z_mb, Z_mb_p, X_mb, X_mb_p, obj="discriminator")
            # Update discriminators
            disc_h_opt.zero_grad()
            disc_m_opt.zero_grad()
            D_loss.backward()
            disc_h_opt.step()
            disc_m_opt.step()

            # Train generator
            gen_opt.zero_grad()
            G_loss = model(Z_mb, Z_mb_p, X_mb, X_mb_p, obj="generator")
            G_loss.backward()
            gen_opt.step()

        logger.set_description(
            f"Epoch: {epoch}, G: {G_loss:.4f}, D: {-D_loss:.4f}"
        )
        if neptune_logger is not None:
            neptune_logger["train/Generator"].log(G_loss)
            neptune_logger["train/Discriminator"].log(-D_loss)
            neptune_logger["train/martingale_regularization"].log(-(G_loss-D_loss))
            if (epoch + 1)  > 0: # (epoch + 1) % 10 == 0:
                with torch.no_grad():
                    # generate synthetic data and plot it
                    X_hat = model(z1=fixed_Z_mb, obj="inference")
                    x_axis = np.arange(X_hat.size(dim=1))
                    fig, axs = plt.subplots(3, 3, figsize=(14, 10))

                    for x in range(3):
                        for y in range(3):
                            axs[x, y].plot(x_axis, X_hat[x * 3 + y].cpu().numpy())
                            axs[x, y].set_ylim([0, 1])
                            axs[x, y].set_yticklabels([])

                    fig.suptitle(f"Generation: {epoch}", fontsize=14)
                    # fig.savefig('./images/data_at_epoch_{:04d}.png'.format(epoch))
                    # neptune_logger["generated_image"].upload(fig)
                    neptune_logger["generated_image"].log(fig)

                    neptune_logger["SW"].log(sw_approx(x_sw, X_hat))
                    plt.close(fig)

    # save model
    torch.save(model.state_dict(), f"./models/{model_name}")

def cotgan_generator(model, params, eval=False):
    """The inference procedure for TimeGAN
    Args:
        - model (torch.nn.module): The model that generates synthetic data
        - T (List[int]): The time to be generated on
        - args (dict): The model/training configurations
    Returns:
        - generated_data (np.ndarray): The synthetic data generated by the model
    """
    # Load model for inference
    model_name = params["model_name"]
    device = params["device"]
    Z_dim = params["Z_dim"]
    max_seq_len = params["max_seq_len"]
    trainset_size = params["testset_size"]
    filepath = "./models/"
    if not eval:
        model.load_state_dict(torch.load(filepath + model_name, map_location=device))

    print("\nGenerating Data...", end="")
    # Initialize model to evaluation mode and run without gradients
    model.to(device)
    model.eval()
    with torch.no_grad():
        # Generate fake data
        Z = torch.rand((trainset_size, max_seq_len, Z_dim), device=device)
        generated_data = model(Z, obj="inference")
    print("Done")
    return generated_data.cpu().numpy()


def create_idun_job(params):
    """Create a job on idun
    Args:
        - params (dict): The model/training configurations
    Returns:
        - job (idun.job): The job on idun
    """

import argparse
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='cot')
    parser.add_argument('-d', '--dname', type=str, default='spatial_data',
                        choices=['spatial_data'])
    parser.add_argument('-t', '--test', type=str, default='cot', choices=['cot'])
    parser.add_argument('-s', '--seed', type=int, default=1)
    parser.add_argument('-gss', '--g_state_size', type=int, default=32)
    parser.add_argument('-gfs', '--g_filter_size', type=int, default=32)
    parser.add_argument('-dss', '--d_state_size', type=int, default=32)
    parser.add_argument('-dfs', '--d_filter_size', type=int, default=32)

    # animation data has T=13 and human action data has T=16
    parser.add_argument('-ts', '--time_steps', type=int, default=10)
    parser.add_argument('-sinke', '--sinkhorn_eps', type=float, default=0.8)
    parser.add_argument('-reg_p', '--reg_penalty', type=float, default=0.01)
    parser.add_argument('-sinkl', '--sinkhorn_l', type=int, default=100)
    parser.add_argument('-Dx', '--Dx', type=int, default=1)
    parser.add_argument('-Dz', '--z_dims_t', type=int, default=5)
    parser.add_argument('-Dy', '--y_dims', type=int, default=20)
    parser.add_argument('-g', '--gen', type=str, default="fc",
                        choices=["lstm", "fc"])
    parser.add_argument('-bs', '--batch_size', type=int, default=4)
    parser.add_argument('-p', '--path', type=str,
                        default='/home/')
    parser.add_argument('-save', '--save_freq', type=int, default=500)
    parser.add_argument('-lr', '--lr', type=float, default=1e-3)
    parser.add_argument('-bn', '--batch_norm', type=bool, default=True)
    parser.add_argument('-nlstm', '--n_lstm', type=int, default=1)

    # animation original data has 4 channels and human action data has 3
    parser.add_argument('-nch', '--n_channels', type=int, default=1)
    parser.add_argument('-rt', '--read_tfrecord', type=bool, default=True)
    parser.add_argument('-lp', '--projector', type=bool, default=False)

    args = parser.parse_args()

    """
    "model_name": "model_cotgan.pt",
    "n_epochs": 100,
    "l_rate": 0.001, # for both D and G
    "batch_size": 32,
    #"dis_rnn_num_layers": 2,
    #"dis_rnn_hidden_dim": 20,
    "gen_rnn_num_layers": 1,
    "gen_rnn_hidden_dim": 20,
    "hidden_dim": 64, #
    "scaling_coef": 1.0, # distance scaling (TODO(Not implemented))
    "sinkhorn_eps": 0.5, # epsilon regularizer
    "sinkhorn_l": 100, # sinkhorn calculation iterations
    "reg_lam": 0.1, # martingale penalty coefficient
    "Z_dim": 100,
    "optimizer": "Adam", # RMSprop, Adam
    "beta1": 0.5,
    "beta2": 0.9,
    """

    create_idun_job(args)